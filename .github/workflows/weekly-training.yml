name: Weekly Model Training & Predictions

on:
  schedule:
    # Run every Sunday at 2 AM UTC (Sunday night)
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  check-international-break:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Check for International Break
        id: check
        run: |
          # International break dates for 2024 (add more as needed)
          BREAK_DATES=(
            "2024-03-18" "2024-03-25"  # March international break
            "2024-06-03" "2024-06-17"  # June international break
            "2024-09-02" "2024-09-09"  # September international break
            "2024-10-07" "2024-10-14"  # October international break
            "2024-11-11" "2024-11-18"  # November international break
          )
          
          CURRENT_DATE=$(date +%Y-%m-%d)
          SKIP_TRAINING=false
          
          for break_date in "${BREAK_DATES[@]}"; do
            if [[ "$CURRENT_DATE" == "$break_date" ]]; then
              echo "International break detected on $CURRENT_DATE"
              SKIP_TRAINING=true
              break
            fi
          done
          
          echo "skip=$SKIP_TRAINING" >> $GITHUB_OUTPUT
          echo "Current date: $CURRENT_DATE, Skip training: $SKIP_TRAINING"

  train-models:
    needs: check-international-break
    if: needs.check-international-break.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install invoke  # For running tasks

      - name: Set up environment variables
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
          RAPID_API_KEY: ${{ secrets.RAPID_API_KEY }}
        run: |
          echo "Environment variables configured"

      - name: Run data acquisition
        run: |
          cd AIFootballPredictions
          python -m invoke --search-root scripts data-acquisition
        continue-on-error: true

      - name: Run data preprocessing
        run: |
          cd AIFootballPredictions
          python -m invoke --search-root scripts data-preprocessing
        continue-on-error: true

      - name: Train models
        run: |
          cd AIFootballPredictions
          python -m invoke --search-root scripts train-models
        continue-on-error: true

      - name: Acquire next matches
        run: |
          cd AIFootballPredictions
          python -m invoke --search-root scripts acquire-next-matches
        continue-on-error: true

      - name: Generate predictions
        run: |
          cd AIFootballPredictions
          python -m invoke --search-root scripts make-predictions
        continue-on-error: true

      - name: Check model performance
        id: performance
        run: |
          python -c "
          import sys
          import os
          sys.path.append('.')
          sys.path.append('./AIFootballPredictions')
          
          try:
              from model_monitor import ModelMonitor
              import json
              
              monitor = ModelMonitor()
              recommendation = monitor.get_retraining_recommendation()
              
              # Check if retraining is recommended (correct method name)
              should_retrain, triggers = monitor.check_retraining_triggers()
              
              print(f'Retraining recommendation: {recommendation}')
              print(f'Should retrain: {should_retrain}')
              print(f'Triggers: {triggers}')
              
              # Save results for logging
              with open('training_results.json', 'w') as f:
                  json.dump({
                      'recommendation': recommendation,
                      'should_retrain': should_retrain,
                      'triggers': triggers,
                      'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
                  }, f, indent=2)
          except ImportError as e:
              print(f'Warning: Could not import model_monitor: {e}')
              print('Continuing without performance monitoring...')
              # Create dummy results file
              with open('training_results.json', 'w') as f:
                  json.dump({
                      'recommendation': {'status': 'monitoring_unavailable'},
                      'should_retrain': False,
                      'triggers': [],
                      'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
                      'note': 'Performance monitoring unavailable'
                  }, f, indent=2)
          except Exception as e:
              print(f'Error in model monitoring: {e}')
              with open('training_results.json', 'w') as f:
                  json.dump({
                      'recommendation': {'status': 'error'},
                      'should_retrain': False,
                      'triggers': [],
                      'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
                      'error': str(e)
                  }, f, indent=2)
          "
        continue-on-error: true

      - name: Training completed
        run: |
          echo "‚úÖ Weekly training pipeline completed successfully!"
          echo "üìä Check training_results.json for performance details"
          if [ -f "training_results.json" ]; then
            echo "üìà Training Results:"
            cat training_results.json
          fi
          echo "üéØ Next training: Next Sunday at 2 AM UTC"
          echo "üåê Dashboard will be updated with new predictions"

  skip-notification:
    needs: check-international-break
    if: needs.check-international-break.outputs.should_skip == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Send skip notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚è∏Ô∏è Prosora Sports - Training Skipped (International Break)"
          to: akashdagar03@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            Weekly training skipped due to international break üåç
            
            üìÖ Date: $(date -u +%Y-%m-%d)
            ‚è∏Ô∏è Reason: International break detected
            
            Training will resume next Sunday when regular league matches return.
            
            üåê Dashboard: https://prosora-sports-analytics-platform.streamlit.app
            üîß API: https://prosora-sports-api.onrender.com
            
            ---
            Prosora Sports Analytics Platform
            Automated Training System